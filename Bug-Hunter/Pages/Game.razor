
@inject NavigationManager Nav
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject BugHunter.Services.GameService Games

Nav.NavigateTo("game");

<div class="game-wrap">
    @if (!_started)
    {
        <div class="controls">
            <button class="btn" @onclick="Start">Start</button>
            <a class="btn" href="@ShareUrl" target="_blank" rel="noopener">Partager sur LinkedIn</a>
        </div>
    }

    <canvas @ref="_canvas" width="800" height="600" class="game-canvas"></canvas>

    @if (_showReplay)
    {
        <div class="overlay">
            <div class="panel">
                <h2>Game Over</h2>
                <p>Score: @_lastScore</p>
                <button class="btn" @onclick="Start">Rejouer</button>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference _canvas;
    private IJSObjectReference? _module;
    private bool _started;
    private bool _showReplay;
    private int _lastScore;

    private string ShareUrl => $"https://www.linkedin.com/sharing/share-offsite/?url={Uri.EscapeDataString(Nav.BaseUri)}&mini=true";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var moduleUrl = new Uri(new Uri(Nav.BaseUri), "js/interop.js").ToString();
            _module = await JS.InvokeAsync<IJSObjectReference>("import", moduleUrl);

            Games.OnGameOver = score =>
            {
                _lastScore = score;
                _showReplay = true;
                _started = false;
                InvokeAsync(StateHasChanged);
            };
        }
    }

    private async Task Start()
    {
        if (_module is null)
        {
            var moduleUrl = new Uri(new Uri(Nav.BaseUri), "js/interop.js").ToString();
            _module = await JS.InvokeAsync<IJSObjectReference>("import", moduleUrl);
        }

        _showReplay = false;
        _started = true;

        await _module!.InvokeVoidAsync("start", Games.GetJsRef(), _canvas);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try { await _module.InvokeVoidAsync("stop"); } catch { /* ignore */ }
        }
    }
}
