@page "/invaders"
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject BugHunter.Services.InvadersGameService Invader

<div class="game-wrap">
    @if (!_started && !_over)
    {
        <div class="controls">
            <button class="btn" @onclick="Start">Start</button>
        </div>
    }

    <canvas @ref="_canvas" width="800" height="600" class="game-canvas"></canvas>

    @if (_started && !_over)
    {
        <div class="touch-controls">
            <button class="btn" @onclick="() => Move(-1)">◀︎</button>
            <button class="btn" @onclick="Shoot">⭳</button>
            <button class="btn" @onclick="() => Move(+1)">▶︎</button>
        </div>
    }

    @if (_over)
    {
        <div class="overlay">
            <div class="panel">
                <h2>Game Over</h2>
                <p>Score: @_lastScore</p>
                <button class="btn" @onclick="Start">Rejouer</button>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference _canvas;
    private IJSObjectReference? _mod;
    private bool _started, _over;
    private int _lastScore;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var url = new Uri(new Uri(Nav.BaseUri), "js/invaders.js").ToString();
            _mod = await JS.InvokeAsync<IJSObjectReference>("import", url);

            Invader.OnGameOver = score =>
            {
                _lastScore = score;
                _over = true;
                _started = false;
                InvokeAsync(StateHasChanged);
            };
        }
    }

    private async Task Start()
    {
        if (_mod is null)
        {
            var url = new Uri(new Uri(Nav.BaseUri), "js/invaders.js").ToString();
            _mod = await JS.InvokeAsync<IJSObjectReference>("import", url);
        }
        _over = false; _started = true;
        await _mod!.InvokeVoidAsync("startInvaders", Invader.GetJsRef(), _canvas);
    }

    private Task Move(int axis) => Invader.Move(axis);
    private Task Shoot() => Invader.Shoot();

    public async ValueTask DisposeAsync()
    {
        if (_mod is not null)
        {
            try { await _mod.InvokeVoidAsync("stopInvaders"); } catch { }
        }
    }
}